#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    tp=new ThreadPool(20);
    init();
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::init()
{
    logInit();
    ptrMotor=new motorCtrl();
    ptrMotor->all_motor_init();
    ptrCan=new canBus();
    ptrCan->postMsg = std::bind(&MainWindow::canMsgHandle,this, std::placeholders::_1);
    ptrCan->can_card_initial();
    int res=poweron_self_check();
    if(res!=ERR_NO)
    {
        rcsLog->error("PowerON check failed,error code: {}",res);

    }


}

void MainWindow::logInit()
{
    QJsonObject config;
    config=rcsConfig.value("Log").toObject();
    auto sink = std::make_shared<Log>(config);
    sink->postLog = std::bind(&MainWindow::PostLog, this, std::placeholders::_1, std::placeholders::_2);
    auto logger = std::make_shared<spdlog::logger>("show", sink);
    spdlog::register_logger(logger);
    logger->set_pattern("%H:%M:%S %v");
    rcsLog = logger;
    connect(this,SIGNAL(postlog(const char*,int)),this,SLOT(showLog(const char*,int)));
}

int MainWindow::poweron_self_check()
{
    
    if(0)
        return -1;
    if(0)
        return -2;
    if(0)
        return -3;
}

//hardware excepetion handle
void MainWindow::hardFault_handle()
{


}

void MainWindow::canMsgHandle(QString msg)
{


}

void MainWindow::PostLog(const char* msg_output, int flag)
{
    if(msg_output)
        emit postlog(msg_output,flag);
}

//log
void MainWindow::showLog(const char* msg_output, int flag)
{
    int bytecount=ui->textBrowser->toPlainText().count();
    if(bytecount>50000)
        ui->textBrowser->clear();
    QColor c;
    switch(flag)
    {
    case spdlog::level::err:
        c=QColor(255,0,0,255);
        break;
    case spdlog::level::warn:
        c=QColor(255,255,0,255);
        break;
    case spdlog::level::critical:
        c=QColor(148,43,198,255);
        break;
    case spdlog::level::info:
        c=QColor(0,0,0,255);
        break;
    case spdlog::level::trace:
        c=QColor(0,0,0,255);
        break;
    case spdlog::level::debug:
        c=QColor(0,0,0,255);
        break;

    default:
        break;
    }
    ui->textBrowser->setTextColor(c);
    QString str=QString(msg_output);
    ui->textBrowser->append(str);
}

void MainWindow::on_pushButton_clicked()
{
    rcsLog->info("this is test for log!");
}

void MainWindow::task1()
{
    tp->enqueue([=]{
        while(1){
            rcsLog->info("this is task 1! every 200 ms");
            usleep(200000);
        }

    });
}
void MainWindow::task2()
{
    tp->enqueue([=]{
        while(1){
            rcsLog->info("this is task 2! every 300 ms");
            usleep(300000);
        }
    });
}
void MainWindow::task3()
{
    tp->enqueue([=]{
        while(1){
            rcsLog->info("this is task 3! every 400 ms");
            usleep(400000);

        }

    });
}
void MainWindow::task4()
{
    tp->enqueue([=]{
        while(1){
            rcsLog->info("this is task 4!every 500 ms");
            usleep(500000);
        }

    });
}
void MainWindow::task5()
{
    tp->enqueue([=]{
        while(1){
            rcsLog->info("this is task 5! every 600 ms");
            usleep(600000);
        }

    });
}

void MainWindow::task6()
{
    tp->enqueue([=]{
        while(1){
            rcsLog->info("this is task 6! every 700 ms");
            usleep(700000);
        }

    });
}

void MainWindow::task7()
{
    tp->enqueue([=]{
        while(1)
        {
            rcsLog->info("this is task 7! every 800 ms");
            usleep(800000);
        }

    });
}
