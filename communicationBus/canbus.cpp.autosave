#include "canbus.h"

using namespace std;
using namespace boost::asio;           //定义一个命名空间，用于后面的读写操作


using namespace std;
#define __countof(a)  (sizeof(a)/sizeof(a[0]))

#define  DEF_DEV_INDEX               0
#define  DEF_USE_CAN_NUM             1      // 1-使用CAN0；2-使用CAN1；3-同时使用CAN0、CAN1
#define  DEF_SEND_TYPE		            2	    // CAN发送类型,0-正常发送;1-单次发送;2-自发自收;3-单次自发自收
#define  DEF_SEND_FRAMES             4      // 每次发送帧数
#define  DEF_SEND_TIMES              10000  // 发送次数
#define  DEF_SEND_DELY               3      // 发送前延时,单位秒

DWORD dwDeviceHandle;
typedef struct {
   int Run;
   DWORD ch;
}rcv_thread_arg_t;

typedef struct {
   DWORD ch;
   DWORD sndType;   //0 - 正常发送;1 - 单 次 发送;2 - 自发自收;3 - 单 次 自发自收
   DWORD sndFrames; // 每次发送帧数
   DWORD sndTimes;  // 发送次数
}snd_thread_arg_t;

unsigned long CanSendcount[2] = { 0, 0 };

void* receive_func(void *param)  //接收线程的处理函数
{
   int reclen = 0;
   rcv_thread_arg_t *thread_arg = (rcv_thread_arg_t *)param;
   int ind = thread_arg->ch;
   unsigned long count = 0;
   unsigned long errcount = 0;
   CAN_DataFrame rec[100];
   int i;
   CAN_DataFrame snd;
   CAN_ErrorInformation err;
   printf("receive thread running....%d\n", ind);
   while ( thread_arg->Run ) {
      if ( (reclen = CAN_ChannelReceive(dwDeviceHandle, ind,rec, __countof(rec), 200)) > 0 ) {
         printf("CAN%d Receive: %08X", ind, rec[reclen - 1].uID);
         for ( i = 0; i < rec[reclen - 1].nDataLen; i++ ) {
            printf(" %02X", rec[reclen - 1].arryData[i]);
         }
         printf("\n");
         count += reclen;
         printf("CAN%d rcv count=%ld\n", ind, count);
      } else {
         if ( CAN_GetErrorInfo(dwDeviceHandle, ind, &err) == CAN_RESULT_OK ) {  // 必须调用CAN_GetErrorInfo函数
                                                                                // 处理错误信息
            errcount++;
         } else {
            // CAN卡没有收到CAN报文
         }
      }
   }
   printf("CAN%d rcv count=%ld err count:%ld\n", ind, count, errcount);
}

void* send_func(void *param)
{
   snd_thread_arg_t *thread_arg = (snd_thread_arg_t *)param;
   CAN_DataFrame *send = new CAN_DataFrame[1];
   int times = thread_arg->sndTimes;  //  26000-12h
   int ch = thread_arg->ch;

  send[0].uID = 0x605;         // ID //ch
  send[0].nSendType = thread_arg->sndType;  // 0-正常发送;1-单次发送;2-自发自收;3-单次自发自收
  send[0].bRemoteFlag = 0;  // 0-数据帧；1-远程帧
  send[0].bExternFlag = 0;  // 0-标准帧；1-扩展帧
  send[0].nDataLen = 8;     // DLC
  for ( int i = 0; i < send[0].nDataLen; i++ ) {
     send[0].arryData[i] = i;
  }

   printf("CAN%d Send %d\r\n", ch, times);
   unsigned long sndCnt = CAN_ChannelSend(dwDeviceHandle, ch, send, 1);

   printf("CAN%d Send Count:%ld end \r\n", ch, CanSendcount[ch]);
}


canBus::canBus()
{

}

int canBus::can_card_initial()
{
    char *a;
    char c;
    int helpflg = 0, errflg = 0;
    int __useCanDevIndex = DEF_DEV_INDEX; // CAN设备索引,从0开始
    int __useCanChannel = DEF_USE_CAN_NUM; // 1-使用CAN0；2-使用CAN1；3-使用CAN0、CAN1
    int __useCanSendType = DEF_SEND_TYPE; // CAN发送类型,0-正常发送;1-单次发送;2-自发自收;3-单次自发自收
    int __useCanSendFrames = DEF_SEND_FRAMES; // 每次发送帧数
    int __useCanSendTimes = DEF_SEND_TIMES; // 发送次数
    int __useCanSendDely  = DEF_SEND_DELY;  // 发送前延时
    // CAN卡操作
    time_t tm1, tm2;
    CAN_InitConfig config;
    Wakeup_Config  wakeup_config;
    int i = 0;
    rcv_thread_arg_t rcv_thread_arg0;
    rcv_thread_arg_t rcv_thread_arg1;
    snd_thread_arg_t snd_thread_arg0;
    snd_thread_arg_t snd_thread_arg1;
    pthread_t rcv_threadid0;
    pthread_t rcv_threadid1;
    pthread_t snd_threadid0;
    pthread_t snd_threadid1;
    int ret;
    // 打开设备
    if ( (dwDeviceHandle = CAN_DeviceOpen(ACUSB_132B, __useCanDevIndex, 0)) == 0 ) {
       rcsLog->error("CAN device open error");
       return -1;
    }
    // 启动CAN通道
    config.dwAccCode = 0;
    config.dwAccMask = 0xffffffff;
    config.nFilter  = 0;       // 滤波方式(0表示未设置滤波功能,1表示双滤波,2表示单滤波)
    config.bMode    = 0;             // 工作模式(0表示正常模式,1表示只听模式)
    config.nBtrType = 1;      // 位定时参数模式(1表示SJA1000,0表示LPC21XX)
    config.dwBtr[0] = 0x00;   // BTR0   0014 -1M 0016-800K 001C-500K 011C-250K 031C-12K 041C-100K 091C-50K 181C-20K 311C-10K BFFF-5K
    config.dwBtr[1] = 0x1c;   // BTR1
    config.dwBtr[2] = 0;
    config.dwBtr[3] = 0;
    if ( (__useCanChannel & 1) == 1 ) {
       if ( CAN_ChannelStart(dwDeviceHandle, 0, &config) != CAN_RESULT_OK ) {
           rcsLog->error("CAN device start error");
           return -2;
       }
    }
    if ( (__useCanChannel & 2) == 2 ) {
       if ( CAN_ChannelStart(dwDeviceHandle, 1, &config) != CAN_RESULT_OK ) {
           rcsLog->error("CAN device start error");
           return -3;
       }
    // 读取设备信息
    CAN_DeviceInformation DevInfo;
    if ( CAN_GetDeviceInfo(dwDeviceHandle, &DevInfo) != CAN_RESULT_OK ) {
       rcsLog->error("CAN get device info error");
       return -4;
    }
    rcsLog->info("--{}--", DevInfo.szDescription);
    rcsLog->info("SN:{}", DevInfo.szSerialNumber);
    rcsLog->info("CAN 通道数:{}", DevInfo.bChannelNumber);
    rcsLog->info("硬件  版本:{}", DevInfo.uHardWareVersion);
    rcsLog->info("固件  版本:{}", DevInfo.uFirmWareVersion);
    rcsLog->info("驱动  版本:{}", DevInfo.uDriverVersion);
    rcsLog->info("接口库版本:{}", DevInfo.uInterfaceVersion);

    return 0;

}

void canBus::can_cycle_recv()
{
    u32 tmp = 0;

     while(1)
     {
         memset(&Message_cmc,0,sizeof(CAN_DataFrame));
         CAN_ChannelReceive(dwDeviceHandle, 0,&Message_cmc, 100, 200);	//接收函数
         if((int)Message_cmc.uID!=0)
         {
                    
         }
     }
 

}
